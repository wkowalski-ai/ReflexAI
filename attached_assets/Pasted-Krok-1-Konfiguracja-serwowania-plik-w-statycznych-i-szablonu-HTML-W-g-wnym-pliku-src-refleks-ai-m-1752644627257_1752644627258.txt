Krok 1: Konfiguracja serwowania plików statycznych i szablonu HTML

W głównym pliku src/refleks_ai/main.py dodaj kod do serwowania plików statycznych. Zaimportuj StaticFiles i zamontuj katalog /static pod ścieżką /static.

Utwórz plik index.html w katalogu static/. Stwórz w nim podstawową strukturę dokumentu HTML5. W sekcji <head> dodaj:

Link do pliku CSS: <link rel="stylesheet" href="/static/css/style.css">

Link do skryptu htmx (z CDN): <script src="https://unpkg.com/htmx.org@1.9.10"></script>

Link do Twojego skryptu JS: <script src="/static/js/main.js" defer></script>

W pliku src/refleks_ai/main.py dodaj endpoint GET /, który będzie zwracał plik index.html jako HTMLResponse.

Krok 2: Implementacja interfejsu logowania i rejestracji

W pliku static/index.html stwórz dwa formularze: jeden dla logowania (#login-form) i jeden dla rejestracji (#register-form). Domyślnie ukryj widok aplikacji i pokaż tylko te formularze.

W pliku static/js/main.js napisz logikę do obsługi tych formularzy:

Dodaj event listener na zdarzenie submit.

Pobierz dane (email, hasło) z formularza.

Wyślij asynchroniczne żądanie fetch typu POST do odpowiedniego endpointu (/register lub /token).

Po pomyślnym zalogowaniu, zapisz otrzymany token JWT w localStorage i przełącz widok, ukrywając formularze i pokazując główny interfejs aplikacji.

Krok 3: Implementacja interfejsu czatu

W static/index.html stwórz strukturę dla widoku czatu:

Kontener na wiadomości: <div id="chat-container"></div>

Formularz do wysyłania wiadomości z polem <input> i przyciskiem <button>: <form id="chat-form">.

W static/js/main.js dodaj logikę do zarządzania czatem:

Stwórz w Javascripcie tablicę chatHistory, która będzie przechowywać wszystkie wiadomości (obiekty z role i content). Pamiętaj o dodaniu początkowego promptu systemowego.

Po wysłaniu formularza, dodaj wiadomość użytkownika do chatHistory i wyświetl ją w #chat-container.

Wyślij całą tablicę chatHistory do backendu na endpoint POST /chat/conversation, dołączając token JWT w nagłówku Authorization.

Po otrzymaniu odpowiedzi, dodaj wiadomość asystenta do chatHistory i również wyświetl ją w #chat-container.

Dodaj przycisk "Zakończ i Zapisz Refleksję", który wyśle finalną historię na endpoint POST /chat/end_session.

Krok 4: Implementacja widoku Dziennika Sesji (z użyciem htmx)

W static/index.html stwórz strukturę menu hamburgerowego. Wewnątrz umieść przycisk do przełączania na widok dziennika, np.:

HTML

<button hx-get="/ui/diaries" hx-target="#main-content-area" hx-swap="innerHTML">
    Zobacz mój dziennik
</button>
Stwórz nowy router w backendzie (src/refleks_ai/routers/ui_router.py), który będzie serwował fragmenty HTML. Będziesz potrzebował Jinja2Templates do renderowania HTML.

Zaimplementuj w nim endpoint GET /ui/diaries, który wymaga autentykacji.

Endpoint ten pobiera listę dzienników użytkownika z bazy danych, a następnie renderuje szablon HTML (np. diary_list_partial.html) zawierający pętlę for po wpisach, i zwraca go jako HTMLResponse.

W renderowanym fragmencie HTML (diary_list_partial.html), dodaj przyciski do usuwania wpisów, używając atrybutów htmx, np.:

HTML

<button hx-delete="/diaries/{diary.id}" hx-target="closest li" hx-swap="outerHTML" hx-confirm="Czy na pewno chcesz usunąć ten wpis?">
    Usuń
</button>
Krok 5: Podstawowe ostylowanie

Utwórz plik static/css/style.css.

Zdefiniuj w nim podstawowe style, aby aplikacja była czytelna i estetyczna:

Ustaw spokojną paletę kolorów (np. odcienie błękitu, szarości).

Wybierz czytelną czcionkę (np. Lato, Nunito z Google Fonts).

Ostyluj dymki czatu, aby odróżnić wiadomości użytkownika od AI.

Użyj Flexbox lub Grid do stworzenia responsywnego layoutu.